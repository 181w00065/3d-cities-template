/**
 * File:    BuildingFacadesFromFootprints.cga
 * Created: 5 Oct 2012 22:22:18 GMT
 * Author:  Craig McCabe
 */

version "2012.1"

attr totalHeight = 0
attr levelsAboveGround = 0
attr buildingHeightFactor = 0.3048
attr wallColor              = "#fefefe"
attr windowColor 			= "#000000"
attr tile_width = 3

@StartRule
Building --> 
	 extrude(totalHeight*buildingHeightFactor)
	 comp(f){ front : Facade | side : Facade | top : Roof }

nTiles  = ceil(scope.sx/tilewidth)
const tilewidth   = totalHeight/levelsAboveGround/4*3

Facade -->
	setupProjection(0,scope.xy,getFacadeTexProjectionWidth,getFacadeTexProjectionHeight) projectUV(0)
	FacadeTexture		

FacadeTexture -->
		texture(getFacade)
		set(material.specular.r,3) set(material.specular.g,3) set(material.specular.b,3)		# for the looks in the CityEngine we add some over-exagerated specularity (otherwise the model is too dark for opengl...)
		set(material.specularmap, getFacadeReflMap)
		set(material.shininess,20)		
		

# first we determine which facade to take according to its number of floors
attr texFloors = 
	case levelsAboveGround <= 3 && p(0.4) : 3
	case levelsAboveGround <= 4 && p(0.4) : 4
	case levelsAboveGround <= 5 && p(0.4) : 5
	case levelsAboveGround <= 6 && p(0.4) : 6
	case levelsAboveGround <= 7 && p(0.4) : 7
	else						: 60

const getFacade =	# string with potential texture, "high enough to use as texture"
		fileRandom("assets/textured/fac_*_floors"+texFloors+"*_day.jpg")

const getFacadeReflMap = replace(getFacade, "day", "refl")


getFloors 	= float(getRange(getFacade,"floors","_tiles"))					

getTiles 	= float(getRange(getFacade,"tiles",".jpg"))						

# align the texture projection height to the current facade so that the texture floors fit	
getFacadeTexProjectionHeight = scope.sy/levelsAboveGround*getFloors

# align the texture projection width to the current facade so that the texture tiles fit	
getFacadeTexProjectionWidth = scope.sx/nTiles*getTiles

getFlatRoofTexture =
		fileRandom("assets/textured/flatroof*_day.jpg")

Roof -->
	alignScopeToGeometry(zUp,auto)
	setupProjection(0,scope.xy,'1,'1) projectUV(0)
	texture(getFlatRoofTexture)

const getRoofTexture =
		fileRandom("assets/textured/rooftile*_day.jpg")

const getTextureSizeU = rand(3,5)
const getTextureSizeV = getTextureSizeU*rand(2,5)
const getDirtmapTexture = fileRandom("assets/textured/dirtmap.*.512x512.jpg")

RoofPlane -->
	texture(getRoofTexture) setupProjection(0,scope.xy,getTextureSizeU,getTextureSizeV) projectUV(0) 
	set(material.dirtmap,getDirtmapTexture) setupProjection(2,scope.xy,'1,'1) projectUV(2) 
